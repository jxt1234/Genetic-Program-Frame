#include "genetic_operator.h"
#include "group.h"
template <class individual>
evolution_group<individual>::evolution_group(const int scale,const int _s,const int _v,const int _c):sel(_s,PART_EVOLU),var(_v),cro(_c)
{
    individual *temp;
    individual::data_input();
    for(int i=0;i<scale;++i)
    {
        temp=new individual;
        group.push_back(temp);
    }
    best=new individual;
    best->fit_comput();
}

template <class individual>
evolution_group<individual>::~evolution_group()
{
    for(int i=0;i<group.size();++i)
    {
        delete group[i];
    }
    group.clear();
    delete best;
    individual::destroy();
}


template <class individual>
bool evolution_group<individual>::best_decide()
{
    double temp;
    int n=0;
    for(int i=0;i<group.size();++i)
    {
        (group[i])->fit_comput();
    }
    temp=(group[0])->get_fit();
    for(int i=1;i<group.size();++i)
    {
        if((group[i])->get_fit()>=temp) temp= (group[i])->get_fit(), n=i;
    }
    if(temp>=best->get_fit()) 
    {
        *best = *(group[n]);
        output();
    }
    return true;
}

template <class individual>
bool evolution_group<individual>::evolution_s()
{
    best_decide();
    sel.sel(group);
    cro.cro(group);
    var.var(group);
    return true;
}

template <class individual>
bool evolution_group<individual>::evolution(int genr, const char* fit)
{
    ofstream file;
    file.open(fit);
    for(int i=0;i<genr;++i)
    {
        evolution_s();
        fit_record(file);
    }
    file.close();
    return true;
}

